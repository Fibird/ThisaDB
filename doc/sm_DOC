
System Management for RedBase

Nandu Jayakumar
CS 346 Spring 2011
nandu@cs.stanford.edu


---------------------------------------

Overall Design:
 
  This is an implemenation of the system catalogs as relations within
  the database along with commands required to bootstrap and interact
  with tables/indexes in the database. 

   relcat and attrcat are built as RM files with fixed schemas.
   A struct called DataRelInfo was created (much like DataAttrInfo) to
   represent each record in relcat. Each record in attrcat is
   basically a DataAttrInfo struct.

---------------------------------------

Key Data Structures:

  
   The items maintained in relcat include -

recordSize;            // Size per row
attrCount;             // # of attributes
numPages;              // # of pages used by relation
numRecords;            // # of records in relation
relName[MAXNAME+1];    // Relation name

   Currently numPages and numRecords are populated by
   SM_Manager::Load() but other DML will also have to keep these
   correct in order for them to be useful system statistics.
    
---------------------------------------

Testing:

   Automated unit tests were used to test each class. A popular test
   harness - google-test, which is in the
   same style as JUnit was used to make testing fast and automatic.
   See sm_manager_gtest.cc.
   Data files were created and used for testing alongside testing with
   the suggested stars/soaps data.

---------------------------------------

Bugs/Known Issues:
    
   Wish there was a way to print the index as if it were a
   relation. I considered making the index available as a full
   relation by making entries in relcat/attrcat but decided against it
   so that users would not be stopped from creating tables with
   .number suffixes.

---------------------------------------

1 (a) Since the system catalogs are accessed very frequently, we
suggested that you open the catalogs for a database when the database
is opened, and then keep the catalogs open until the database is
closed. Did you implement this scheme? Why or why not?

Yes. I implemented this scheme because I decided that the open handles
to the catalog are a very useful convenience in the code along with
being an efficiency improvement so that extra IOs or filesystem
operations are not performed to get the catalogs everytime a query is
executed.

See SM_Manager::OpenDB() at 
sm_manager.cc:50 for an example of initialization of handles to the
catalogs. These data members are now used directly whenever I need to
access the catalogs instead of opening them each time.


(b) If you implemented the scheme in (a), then updates to the catalogs
may not be reflected onto disk immediately. For example, if you open a
catalog a second time (to implement the help utility, for example, or
to print the contents of a catalog), then you may not see the most
current version of the catalog. How do you handle this issue?

I handle this issue by intercepting calls to the catalog. This is
single-user, single-access system so all calls have to go through the
same instance of SM_Manager. Within a given instance of SM_Manager, I
intercept all calls to the catalogs and serve them out of the objects
within the SM_Manager class that keep filehandles open to the catalog
at all times. 

See SM_Manager::Print() at 
sm_manager.cc:599 for an example of intercepts.


2 If you're in the middle of a bulk load and something goes wrong, what
does your bulk load utility do? Your answer may differ depending on
what went wrong; if so, describe the different cases. Briefly discuss
when your solution is appropriate and when it may not be appropriate.

See SM_Manager::Load() at 
sm_manager.cc:513 

case a. Input file is empty.
Not considered an error. Nothing is loaded.

case b. Input file has wrong number of columns. (line 515)
Instant failure at the point (at the row) where this is encountered.
Better fail than load bad data in this case.
Inappropriate when dealing with lots of dirty data and trying to make
a best effort load.

case c. Input file has wrong type information for attributes (line 513)
No easy way to tell if the data in ascii is correct or not. Here the
user's judgement is trusted. Truncate floats and read them as
ints. Read ints as floats if required. If a string attribute is
incorrectly indicated as a float/int binary reinterpretation will
result. On other hand if float/int are claimed as ints then their
ascii representation is used.
This behavior is mostly inherited from std::stringstream
Inappropriate when strict type-aware loading is needed and if strict
rules are available for the inputs. These rules will need to also be
provided along with input schema.

case d. Failure in inserting records or index entries
Instant failure at the point (at the row) where this is encountered.
Inappropriate sometimes because we now have a partially loaded
file. No support for all-or-nothing semantics.

3 When the "create index" command is invoked, how do you generate the
filename and index number that are used as parameters in the call to
IX_Manager::CreateIndex()? Are there any limitations to your approach? 

I use the offset of the column as its index number and -1 to indicate
that there is no index.

See SM_Manager::CreateIndex at
sm_manager.cc:336
 
Advantages
- guaranteed non-negative unique number - so can distinguish between columns
- always guaranteed to exist
- attribute lengths and number of attributes are fixed - so no chance
of having indexNo exceed the limits of int unintentionally.
- no need to scan other indexes to generate an index number.

Disadvantages
- limited to a single index per attribute - but redbase limits this
any way.
- if alter table was allowed and attributes were removed then will
have to adjust all offsets and index numbers of indexes on disk for
all other columns potentially.

